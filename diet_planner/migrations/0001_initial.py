# Generated by Django 4.2.7 on 2025-09-19 21:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DietChart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('generated_by_ai', models.BooleanField(default=True)),
                ('ai_model_used', models.CharField(default='rule_based_architect', max_length=100)),
                ('generation_notes', models.TextField(blank=True)),
                ('duration_days', models.PositiveIntegerField(default=7)),
                ('meals_per_day', models.PositiveIntegerField(default=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dietitian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diet_charts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('category', models.CharField(max_length=100)),
                ('subcategory', models.CharField(blank=True, max_length=100)),
                ('calories', models.PositiveIntegerField()),
                ('protein', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('fat', models.FloatField()),
                ('fiber', models.FloatField()),
                ('primary_taste', models.CharField(choices=[('sweet', 'Sweet'), ('sour', 'Sour'), ('salty', 'Salty'), ('pungent', 'Pungent'), ('bitter', 'Bitter'), ('astringent', 'Astringent')], max_length=20)),
                ('secondary_taste', models.CharField(blank=True, choices=[('sweet', 'Sweet'), ('sour', 'Sour'), ('salty', 'Salty'), ('pungent', 'Pungent'), ('bitter', 'Bitter'), ('astringent', 'Astringent')], max_length=20)),
                ('energy', models.CharField(choices=[('cooling', 'Cooling'), ('heating', 'Heating'), ('neutral', 'Neutral')], max_length=20)),
                ('vata_effect', models.CharField(choices=[('pacifies', 'Pacifies'), ('aggravates', 'Aggravates'), ('neutral', 'Neutral')], max_length=20)),
                ('pitta_effect', models.CharField(choices=[('pacifies', 'Pacifies'), ('aggravates', 'Aggravates'), ('neutral', 'Neutral')], max_length=20)),
                ('kapha_effect', models.CharField(choices=[('pacifies', 'Pacifies'), ('aggravates', 'Aggravates'), ('neutral', 'Neutral')], max_length=20)),
                ('is_vegetarian', models.BooleanField(default=True)),
                ('is_vegan', models.BooleanField(default=True)),
                ('is_gluten_free', models.BooleanField(default=True)),
                ('is_dairy_free', models.BooleanField(default=True)),
                ('contains_nuts', models.BooleanField(default=False)),
                ('contains_soy', models.BooleanField(default=False)),
                ('contains_eggs', models.BooleanField(default=False)),
                ('contains_fish', models.BooleanField(default=False)),
                ('contains_shellfish', models.BooleanField(default=False)),
                ('vector_embedding', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('height', models.FloatField(help_text='Height in cm')),
                ('weight', models.FloatField(help_text='Weight in kg')),
                ('prakriti', models.CharField(choices=[('vata', 'Vata'), ('pitta', 'Pitta'), ('kapha', 'Kapha'), ('vata_pitta', 'Vata-Pitta'), ('vata_kapha', 'Vata-Kapha'), ('pitta_kapha', 'Pitta-Kapha'), ('tridosha', 'Tridosha (Balanced)')], max_length=20)),
                ('vikriti', models.CharField(blank=True, choices=[('vata', 'Vata'), ('pitta', 'Pitta'), ('kapha', 'Kapha'), ('vata_pitta', 'Vata-Pitta'), ('vata_kapha', 'Vata-Kapha'), ('pitta_kapha', 'Pitta-Kapha'), ('tridosha', 'Tridosha (Balanced)')], max_length=20, null=True)),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary (little or no exercise)'), ('light', 'Lightly active (light exercise 1-3 days/week)'), ('moderate', 'Moderately active (moderate exercise 3-5 days/week)'), ('active', 'Very active (hard exercise 6-7 days/week)'), ('very_active', 'Extremely active (very hard exercise, physical job)')], max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100)),
                ('allergies', models.JSONField(blank=True, default=list)),
                ('medical_conditions', models.JSONField(blank=True, default=list)),
                ('medications', models.JSONField(blank=True, default=list)),
                ('dietary_preferences', models.JSONField(blank=True, default=list)),
                ('food_dislikes', models.JSONField(blank=True, default=list)),
                ('primary_goal', models.CharField(default='general_wellness', max_length=100)),
                ('target_weight', models.FloatField(blank=True, null=True)),
                ('bmi', models.FloatField(blank=True, null=True)),
                ('daily_calorie_needs', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('dietitian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('day_number', models.PositiveIntegerField(help_text='Day of the week (1-7)')),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack'), ('pre_workout', 'Pre-Workout'), ('post_workout', 'Post-Workout')], max_length=20)),
                ('meal_time', models.TimeField(help_text='Recommended time for this meal')),
                ('target_calories', models.PositiveIntegerField()),
                ('target_protein', models.FloatField()),
                ('target_carbs', models.FloatField()),
                ('target_fat', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diet_chart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to='diet_planner.dietchart')),
            ],
            options={
                'ordering': ['day_number', 'meal_time'],
                'unique_together': {('diet_chart', 'day_number', 'meal_type')},
            },
        ),
        migrations.CreateModel(
            name='MealItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.FloatField(help_text='Quantity in grams')),
                ('serving_size', models.CharField(help_text="e.g., '1 cup', '2 pieces'", max_length=50)),
                ('calories', models.PositiveIntegerField()),
                ('protein', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('fat', models.FloatField()),
                ('fiber', models.FloatField()),
                ('is_ai_generated', models.BooleanField(default=True)),
                ('ai_confidence_score', models.FloatField(blank=True, null=True)),
                ('swap_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diet_planner.food')),
                ('meal_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_items', to='diet_planner.mealplan')),
                ('original_food', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='swapped_versions', to='diet_planner.mealitem')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='FoodSwapLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('swap_reason', models.TextField(blank=True)),
                ('similarity_score', models.FloatField()),
                ('ai_model_used', models.CharField(default='vector_similarity_specialist', max_length=100)),
                ('alternative_suggestions', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dietitian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('meal_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='swap_logs', to='diet_planner.mealitem')),
                ('new_food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_swaps', to='diet_planner.food')),
                ('original_food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='original_swaps', to='diet_planner.food')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='dietchart',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diet_charts', to='diet_planner.patient'),
        ),
    ]
