# Generated by Django 4.2.7 on 2025-09-20 17:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('diet_planner', '0003_alter_food_subcategory'),
    ]

    operations = [
        migrations.AlterField(
            model_name='patient',
            name='activity_level',
            field=models.CharField(choices=[('sedentary', 'Sedentary (little or no exercise)'), ('light', 'Lightly active (light exercise 1-3 days/week)'), ('moderate', 'Moderately active (moderate exercise 3-5 days/week)'), ('active', 'Very active (hard exercise 6-7 days/week)'), ('very_active', 'Extremely active (very hard exercise, physical job)')], default='sedentary', max_length=20),
        ),
        migrations.AlterField(
            model_name='patient',
            name='age',
            field=models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)]),
        ),
        migrations.AlterField(
            model_name='patient',
            name='gender',
            field=models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], default='other', max_length=10),
        ),
        migrations.AlterField(
            model_name='patient',
            name='height',
            field=models.FloatField(blank=True, help_text='Height in cm', null=True),
        ),
        migrations.AlterField(
            model_name='patient',
            name='prakriti',
            field=models.CharField(choices=[('vata', 'Vata'), ('pitta', 'Pitta'), ('kapha', 'Kapha'), ('vata_pitta', 'Vata-Pitta'), ('vata_kapha', 'Vata-Kapha'), ('pitta_kapha', 'Pitta-Kapha'), ('tridosha', 'Tridosha (Balanced)')], default='tridoshic', max_length=20),
        ),
        migrations.AlterField(
            model_name='patient',
            name='weight',
            field=models.FloatField(blank=True, help_text='Weight in kg', null=True),
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, help_text='Brief description of the recipe')),
                ('ingredients', models.JSONField(default=list, help_text='List of ingredients with quantities')),
                ('instructions', models.JSONField(default=list, help_text='Step-by-step cooking instructions')),
                ('cooking_time', models.CharField(choices=[('quick', 'Quick (0-15 min)'), ('moderate', 'Moderate (15-30 min)'), ('long', 'Long (30+ min)')], default='moderate', max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20)),
                ('servings', models.PositiveIntegerField(default=1, help_text='Number of servings')),
                ('calories_per_serving', models.FloatField(default=0.0)),
                ('protein_per_serving', models.FloatField(default=0.0)),
                ('carbs_per_serving', models.FloatField(default=0.0)),
                ('fat_per_serving', models.FloatField(default=0.0)),
                ('ayurvedic_benefits', models.TextField(blank=True, help_text='Ayurvedic benefits of this preparation')),
                ('best_time_to_eat', models.CharField(blank=True, help_text="Best time to consume (e.g., 'Morning', 'Evening')", max_length=100)),
                ('seasonal_notes', models.TextField(blank=True, help_text='Seasonal considerations')),
                ('dosha_considerations', models.TextField(blank=True, help_text='Special notes for different doshas')),
                ('cooking_tips', models.TextField(blank=True, help_text='Helpful cooking tips')),
                ('variations', models.TextField(blank=True, help_text='Alternative preparation methods')),
                ('storage_instructions', models.TextField(blank=True, help_text='How to store leftovers')),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipe_images/')),
                ('video_url', models.URLField(blank=True, help_text='Optional video tutorial URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_public', models.BooleanField(default=True, help_text='Can be viewed by patients')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_recipes', to=settings.AUTH_USER_MODEL)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='diet_planner.food')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'food')},
            },
        ),
    ]
